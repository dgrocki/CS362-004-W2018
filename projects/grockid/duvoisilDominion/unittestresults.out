------------------TESTING GAINED CARDS------------------


Testing with empty supply pile
TEST PASSED

Testing with non empty supply pile


Testing sending to discard
TEST PASSED

Testing sending to deck
TEST PASSED

Testing sending to hand
TEST PASSED
File 'dominion.c'
Lines executed:18.71% of 556
Branches executed:17.35% of 415
Taken at least once:14.46% of 415
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

------------------TESTING FULL DECK COUNT------------------


Testing card 1 counted correctly
TEST PASSED

Testing card 2 counted correctly
TEST PASSED

Testing card 3 counted correctly
TEST PASSED

Testing card 4 counted correctly
TEST PASSED

Testing card 1 counted correctly
TEST PASSED

Testing card 2 counted correctly
TEST PASSED

Testing card 3 counted correctly
TEST PASSED

Testing card 4 counted correctly
TEST PASSED
File 'dominion.c'
Lines executed:20.32% of 556
Branches executed:20.24% of 415
Taken at least once:17.35% of 415
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

------------------TESTING IS GAME OVER------------------


Testing new game if over
TEST PASSED

Testing part way game not over
TEST PASSED

Testing out of provinces
TEST PASSED

Testing out of 2 piles
TEST PASSED

Testing out of 3 piles
TEST PASSED

Testing new game if over
TEST PASSED

Testing part way game not over
TEST PASSED

Testing out of provinces
TEST PASSED

Testing out of 2 piles
TEST PASSED

Testing out of 3 piles
TEST PASSED
File 'dominion.c'
Lines executed:22.12% of 556
Branches executed:22.17% of 415
Taken at least once:19.28% of 415
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

------------------TESTING SCORE FOR------------------


Testing Score Beginning of Game
TEST FAILED score: 1 expected: 3


Testing Score Hand Only
Testing 1 Providence, 1 Duchy, 1 Estate
TEST PASSED score: 10 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse
TEST PASSED score: 9 expected: 9
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall
TEST PASSED score: 10 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall, 1 Garden
TEST FAILED score: 10 expected: 11


Testing Score Deck Only
Testing 1 Providence, 1 Duchy, 1 Estate
TEST FAILED score: 0 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse
TEST FAILED score: 0 expected: 9
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall
TEST FAILED score: 0 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall, 1 Garden
TEST FAILED score: 0 expected: 11


Testing Score Discard Only
Testing 1 Providence, 1 Duchy, 1 Estate
TEST FAILED score: 20 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse
TEST FAILED score: 19 expected: 9
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall
TEST FAILED score: 20 expected: 10
Testing 1 Providence, 1 Duchy, 1 Estate, 1 Curse, 1 Great Hall, 1 Garden
TEST FAILED score: 20 expected: 11


Testing Score all Only
Testing 3 Providence, 3 Duchy, 3 Estate
TEST PASSED score: 30 expected: 30
Testing 3 Providence, 3 Duchy, 3 Estate, 3 Curse
TEST PASSED score: 27 expected: 27
Testing 3 Providence, 3 Duchy, 3 Estate, 3 Curse, 3 Great Hall
TEST PASSED score: 30 expected: 30
Testing 3 Providence, 3 Duchy, 3 Estate, 3 Curse, 3 Great Hall, 3 Garden
TEST FAILED score: 30 expected: 39
File 'dominion.c'
Lines executed:26.44% of 556
Branches executed:32.29% of 415
Taken at least once:29.40% of 415
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'


------------------TESTING SMITHY------------------



Testing If Smithy Ran Successfully
TEST PASSED


Testing If Smithy Drew right Number of cards
TEST FAILED
File 'dominion.c'
Lines executed:30.94% of 556
Branches executed:39.76% of 415
Taken at least once:31.08% of 415
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'


------------------TESTING ADVENTURER------------------



Testing Cards in Deck If Adventurer Ran Successfully
TEST PASSED


Testing If Adventurer Found 2 treasures
TEST FAILED


Testing Cards in Discard If Adventurer Ran Successfully
TEST FAILED
File 'dominion.c'
Lines executed:32.19% of 556
Branches executed:40.72% of 415
Taken at least once:32.05% of 415
Calls executed:16.84% of 95
Creating 'dominion.c.gcov'


------------------TESTING VILLAGE------------------



Testing Village Ran Successfully
TEST PASSED

Testing adding more actions
TEST FAILED


Testing If Village Added 1 card
TEST PASSED

Testing if discarded properly
TEST PASSED
File 'dominion.c'
Lines executed:33.27% of 556
Branches executed:40.72% of 415
Taken at least once:32.29% of 415
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'


------------------TESTING COUNCIL ROOM------------------



Testing Council Room Ran Successfully
TEST PASSED

Testing adding more buys
TEST PASSED


Testing If Council Room discarded
TEST PASSED


Testing If Council Room Added 4 cards to Player 0 and Discard 1
TEST FAILED
Testing if player 1 recieved a card
TEST PASSED
Testing if player 2 recieved a card
TEST PASSED
File 'dominion.c'
Lines executed:35.97% of 556
Branches executed:42.17% of 415
Taken at least once:34.46% of 415
Calls executed:24.21% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4://#include "cards.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 345 returned 100% blocks executed 83%
      345:    9:int compare(const void* a, const void* b) {
      345:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:		return 1;
      345:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       92:   13:		return -1;
      253:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		int k8, int k9, int k10) {
    #####:   24:	int* k = malloc(10 * sizeof(int));
    #####:   25:	k[0] = k1;
    #####:   26:	k[1] = k2;
    #####:   27:	k[2] = k3;
    #####:   28:	k[3] = k4;
    #####:   29:	k[4] = k5;
    #####:   30:	k[5] = k6;
    #####:   31:	k[6] = k7;
    #####:   32:	k[7] = k8;
    #####:   33:	k[8] = k9;
    #####:   34:	k[9] = k10;
    #####:   35:	return k;
        -:   36:}
        -:   37:
function initializeGame called 11 returned 100% blocks executed 94%
       11:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		struct gameState *state) {
        -:   40:
        -:   41:	int i;
        -:   42:	int j;
        -:   43:	int it;
        -:   44:	//set up random number generator
       11:   45:	SelectStream(1);
call    0 returned 100%
       11:   46:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:	//check number of players
       11:   49:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:	{
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
       11:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
      121:   58:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:	{
     1210:   60:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:		{
     1100:   62:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:			{
    #####:   64:				return -1;
        -:   65:			}
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:
        -:   70:	//initialize supply
        -:   71:	///////////////////////////////
        -:   72:
        -:   73:	//set number of Curse cards
       11:   74:	if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   75:	{
       10:   76:		state->supplyCount[curse] = 10;
        -:   77:	}
        1:   78:	else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:	{
        1:   80:		state->supplyCount[curse] = 20;
        -:   81:	}
        -:   82:	else
        -:   83:	{
    #####:   84:		state->supplyCount[curse] = 30;
        -:   85:	}
        -:   86:
        -:   87:	//set number of Victory cards
       11:   88:	if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   89:	{
       10:   90:		state->supplyCount[estate] = 8;
       10:   91:		state->supplyCount[duchy] = 8;
       10:   92:		state->supplyCount[province] = 8;
        -:   93:	}
        -:   94:	else
        -:   95:	{
        1:   96:		state->supplyCount[estate] = 12;
        1:   97:		state->supplyCount[duchy] = 12;
        1:   98:		state->supplyCount[province] = 12;
        -:   99:	}
        -:  100:
        -:  101:	//set number of Treasure cards
       11:  102:	state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  103:	state->supplyCount[silver] = 40;
       11:  104:	state->supplyCount[gold] = 30;
        -:  105:
        -:  106:	//set number of Kingdom cards
      231:  107:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:	{
     1815:  109:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:		{
     1705:  111:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:			{
        -:  113:				//check if card is a 'Victory' Kingdom card
      110:  114:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:				{
       44:  116:					if (numPlayers == 2){
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       20:  117:						state->supplyCount[i] = 8;
        -:  118:					}
        2:  119:					else{ state->supplyCount[i] = 12; }
        -:  120:				}
        -:  121:				else
        -:  122:				{
       88:  123:					state->supplyCount[i] = 10;
        -:  124:				}
      110:  125:				break;
        -:  126:			}
        -:  127:			else    //card is not in the set choosen for the game
        -:  128:			{
     1595:  129:				state->supplyCount[i] = -1;
        -:  130:			}
        -:  131:		}
        -:  132:
        -:  133:	}
        -:  134:
        -:  135:	////////////////////////
        -:  136:	//supply intilization complete
        -:  137:
        -:  138:	//set player decks
       34:  139:	for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  140:	{
       23:  141:		state->deckCount[i] = 0;
       92:  142:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:		{
       69:  144:			state->deck[i][j] = estate;
       69:  145:			state->deckCount[i]++;
        -:  146:		}
      184:  147:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:		{
      161:  149:			state->deck[i][j] = copper;
      161:  150:			state->deckCount[i]++;
        -:  151:		}
        -:  152:	}
        -:  153:
        -:  154:	//shuffle player decks
       34:  155:	for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  156:	{
       23:  157:		if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:		{
    #####:  159:			return -1;
        -:  160:		}
        -:  161:	}
        -:  162:
        -:  163:	//draw player hands
       34:  164:	for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  165:	{
        -:  166:		//initialize hand size to zero
       23:  167:		state->handCount[i] = 0;
       23:  168:		state->discardCount[i] = 0;
        -:  169:		//draw 5 cards
        -:  170:		// for (j = 0; j < 5; j++)
        -:  171:		//	{
        -:  172:		//	  drawCard(i, state);
        -:  173:		//	}
        -:  174:	}
        -:  175:
        -:  176:	//set embargo tokens to 0 for all supply piles
      308:  177:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:	{
      297:  179:		state->embargoTokens[i] = 0;
        -:  180:	}
        -:  181:
        -:  182:	//initialize first player's turn
       11:  183:	state->outpostPlayed = 0;
       11:  184:	state->phase = 0;
       11:  185:	state->numActions = 1;
       11:  186:	state->numBuys = 1;
       11:  187:	state->playedCardCount = 0;
       11:  188:	state->whoseTurn = 0;
       11:  189:	state->handCount[state->whoseTurn] = 0;
        -:  190:	//int it; move to top
        -:  191:
        -:  192:	//Moved draw cards to here, only drawing at the start of a turn
       66:  193:	for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  194:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:	}
        -:  196:
       11:  197:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
       11:  199:	return 0;
        -:  200:}
        -:  201:
function shuffle called 23 returned 100% blocks executed 94%
       23:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:	int newDeck[MAX_DECK];
       23:  206:	int newDeckPos = 0;
        -:  207:	int card;
        -:  208:	int i;
        -:  209:
       23:  210:	if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  211:		return -1;
       23:  212:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  213:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      276:  215:	while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      230:  216:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      230:  217:		newDeck[newDeckPos] = state->deck[player][card];
      230:  218:		newDeckPos++;
      805:  219:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      575:  220:			state->deck[player][i] = state->deck[player][i+1];
        -:  221:		}
      230:  222:		state->deckCount[player]--;
        -:  223:	}
      253:  224:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      230:  225:		state->deck[player][i] = newDeck[i];
      230:  226:		state->deckCount[player]++;
        -:  227:	}
        -:  228:
       23:  229:	return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:	int card;
    #####:  235:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:	//check if it is the right phase
    #####:  238:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:	{
    #####:  240:		return -1;
        -:  241:	}
        -:  242:
        -:  243:	//check if player has enough actions
    #####:  244:	if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:	{
    #####:  246:		return -1;
        -:  247:	}
        -:  248:
        -:  249:	//get card played
    #####:  250:	card = handCard(handPos, state);
call    0 never executed
        -:  251:
        -:  252:	//check if selected card is an action
    #####:  253:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:	{
    #####:  255:		return -1;
        -:  256:	}
        -:  257:
        -:  258:	//play card
    #####:  259:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:	{
    #####:  261:		return -1;
        -:  262:	}
        -:  263:
        -:  264:	//reduce number of actions
    #####:  265:	state->numActions--;
        -:  266:
        -:  267:	//update coins (Treasure cards may be added with card draws)
    #####:  268:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:
    #####:  270:	return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:	int who;
        -:  275:	if (DEBUG){
        -:  276:		printf("Entering buyCard...\n");
        -:  277:	}
        -:  278:
        -:  279:	// I don't know what to do about the phase thing.
        -:  280:
    #####:  281:	who = state->whoseTurn;
        -:  282:
    #####:  283:	if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:		if (DEBUG)
        -:  285:			printf("You do not have any buys left\n");
    #####:  286:		return -1;
    #####:  287:	} else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
    #####:  291:	} else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:		if (DEBUG)
        -:  293:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:		return -1;
        -:  295:	} else {
    #####:  296:		state->phase=1;
        -:  297:		//state->supplyCount[supplyPos]--;
    #####:  298:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  299:
    #####:  300:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:		state->numBuys--;
        -:  302:		if (DEBUG)
        -:  303:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:	}
        -:  305:
        -:  306:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:	//state->discardCount[who]++;
        -:  308:
    #####:  309:	return 0;
        -:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  318:	return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  321:int supplyCount(int card, struct gameState *state) {
        4:  322:	return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 13 returned 100% blocks executed 100%
       13:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:	int i;
       13:  327:	int count = 0;
        -:  328:
       70:  329:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  330:	{
       57:  331:		if (state->deck[player][i] == card) count++;
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -:  332:	}
        -:  333:
       81:  334:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  335:	{
       68:  336:		if (state->hand[player][i] == card) count++;
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -:  337:	}
        -:  338:
       81:  339:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  340:	{
       68:  341:		if (state->discard[player][i] == card) count++;
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  342:	}
        -:  343:
       13:  344:	return count;
        -:  345:}
        -:  346:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  347:int whoseTurn(struct gameState *state) {
        5:  348:	return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:	int k;
        -:  353:	int i;
    #####:  354:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  355:
        -:  356:	//Discard hand
    #####:  357:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:	}
    #####:  361:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:	//Code for determining the player
    #####:  364:	if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  365:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:	}
        -:  367:	else{
    #####:  368:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:	}
        -:  370:
    #####:  371:	state->outpostPlayed = 0;
    #####:  372:	state->phase = 0;
    #####:  373:	state->numActions = 1;
    #####:  374:	state->coins = 0;
    #####:  375:	state->numBuys = 1;
    #####:  376:	state->playedCardCount = 0;
    #####:  377:	state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:	//int k; move to top
        -:  380:	//Next player draws hand
    #####:  381:	for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  383:	}
        -:  384:
        -:  385:	//Update money
    #####:  386:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  387:
    #####:  388:	return 0;
        -:  389:}
        -:  390:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  391:int isGameOver(struct gameState *state) {
        -:  392:	int i;
        -:  393:	int j;
        -:  394:
        -:  395:	//if stack of Province cards is empty, the game ends
       10:  396:	if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  397:	{
        2:  398:		return 1;
        -:  399:	}
        -:  400:
        -:  401:	//if three supply pile are at 0, the game ends
        8:  402:	j = 0;
      208:  403:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  404:	{
      200:  405:		if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  406:		{
       10:  407:			j++;
        -:  408:		}
        -:  409:	}
        8:  410:	if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  411:	{
        2:  412:		return 1;
        -:  413:	}
        -:  414:
        6:  415:	return 0;
        -:  416:}
        -:  417:
function scoreFor called 17 returned 100% blocks executed 100%
       17:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:	int i;
       17:  421:	int score = 0;
        -:  422:	//score from hand
      110:  423:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  424:	{
       93:  425:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       93:  426:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       93:  427:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       93:  428:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       93:  429:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       93:  430:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  431:	}
        -:  432:
        -:  433:	//score from discard
      105:  434:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  435:	{
       88:  436:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       88:  437:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  438:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  439:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  440:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       88:  441:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  442:	}
        -:  443:
        -:  444:	//score from deck
      105:  445:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  446:	{
       88:  447:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       88:  448:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  449:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  450:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  451:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       88:  452:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  453:	}
        -:  454:
       17:  455:	return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:	int i;
        -:  460:	int j;
        -:  461:	int highScore;
        -:  462:	int currentPlayer;
        -:  463:
        -:  464:	//get score for each player
    #####:  465:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:	{
        -:  467:		//set unused player scores to -9999
    #####:  468:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:		{
    #####:  470:			players[i] = -9999;
        -:  471:		}
        -:  472:		else
        -:  473:		{
    #####:  474:			players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:		}
        -:  476:	}
        -:  477:
        -:  478:	//find highest score
    #####:  479:	j = 0;
    #####:  480:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:		{
    #####:  484:			j = i;
        -:  485:		}
        -:  486:	}
    #####:  487:	highScore = players[j];
        -:  488:
        -:  489:	//add 1 to players who had less turns
    #####:  490:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:	{
    #####:  493:		if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:		{
    #####:  495:			players[i]++;
        -:  496:		}
        -:  497:	}
        -:  498:
        -:  499:	//find new highest score
    #####:  500:	j = 0;
    #####:  501:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:		if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:		{
    #####:  505:			j = i;
        -:  506:		}
        -:  507:	}
    #####:  508:	highScore = players[j];
        -:  509:
        -:  510:	//set winners in array to 1 and rest to 0
    #####:  511:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:		if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:		{
    #####:  515:			players[i] = 1;
        -:  516:		}
        -:  517:		else
        -:  518:		{
    #####:  519:			players[i] = 0;
        -:  520:		}
        -:  521:	}
        -:  522:
    #####:  523:	return 0;
        -:  524:}
        -:  525:
function drawCard called 67 returned 100% blocks executed 38%
       67:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:	int deckCounter;
       67:  529:	if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  530:
        -:  531:		//Step 1 Shuffle the discard pile back into a deck
        -:  532:		int i;
        -:  533:		//Move discard to deck
    #####:  534:		for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  535:			state->deck[player][i] = state->discard[player][i];
    #####:  536:			state->discard[player][i] = -1;
        -:  537:		}
        -:  538:
    #####:  539:		state->deckCount[player] = state->discardCount[player];
    #####:  540:		state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:		//Shufffle the deck
    #####:  543:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  544:
        -:  545:		if (DEBUG){//Debug statements
        -:  546:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:		}
        -:  548:
    #####:  549:		state->discardCount[player] = 0;
        -:  550:
        -:  551:		//Step 2 Draw Card
    #####:  552:		count = state->handCount[player];//Get current player's hand count
        -:  553:
        -:  554:		if (DEBUG){//Debug statements
        -:  555:			printf("Current hand count: %d\n", count);
        -:  556:		}
        -:  557:
    #####:  558:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  561:			return -1;
        -:  562:
    #####:  563:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:		state->deckCount[player]--;
    #####:  565:		state->handCount[player]++;//Increment hand count
        -:  566:	}
        -:  567:
        -:  568:	else{
       67:  569:		int count = state->handCount[player];//Get current hand count for player
        -:  570:		int deckCounter;
        -:  571:		if (DEBUG){//Debug statements
        -:  572:			printf("Current hand count: %d\n", count);
        -:  573:		}
        -:  574:
       67:  575:		deckCounter = state->deckCount[player];//Create holder for the deck count
       67:  576:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       67:  577:		state->deckCount[player]--;
       67:  578:		state->handCount[player]++;//Increment hand count
        -:  579:	}
        -:  580:
       67:  581:	return 0;
        -:  582:}
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:	switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:	{
        -:  588:		case curse:
    #####:  589:			return 0;
        -:  590:		case estate:
    #####:  591:			return 2;
        -:  592:		case duchy:
    #####:  593:			return 5;
        -:  594:		case province:
    #####:  595:			return 8;
        -:  596:		case copper:
    #####:  597:			return 0;
        -:  598:		case silver:
    #####:  599:			return 3;
        -:  600:		case gold:
    #####:  601:			return 6;
        -:  602:		case adventurer:
    #####:  603:			return 6;
        -:  604:		case council_room:
    #####:  605:			return 5;
        -:  606:		case feast:
    #####:  607:			return 4;
        -:  608:		case gardens:
    #####:  609:			return 4;
        -:  610:		case mine:
    #####:  611:			return 5;
        -:  612:		case remodel:
    #####:  613:			return 4;
        -:  614:		case smithy:
    #####:  615:			return 4;
        -:  616:		case village:
    #####:  617:			return 3;
        -:  618:		case baron:
    #####:  619:			return 4;
        -:  620:		case great_hall:
    #####:  621:			return 3;
        -:  622:		case minion:
    #####:  623:			return 5;
        -:  624:		case steward:
    #####:  625:			return 3;
        -:  626:		case tribute:
    #####:  627:			return 5;
        -:  628:		case ambassador:
    #####:  629:			return 3;
        -:  630:		case cutpurse:
    #####:  631:			return 4;
        -:  632:		case embargo:
    #####:  633:			return 2;
        -:  634:		case outpost:
    #####:  635:			return 5;
        -:  636:		case salvager:
    #####:  637:			return 4;
        -:  638:		case sea_hag:
    #####:  639:			return 4;
        -:  640:		case treasure_map:
    #####:  641:			return 4;
        -:  642:	}
        -:  643:
    #####:  644:	return -1;
        -:  645:}
        -:  646:
function cardEffect called 5 returned 100% blocks executed 5%
        5:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:	int i;
        -:  650:	int j;
        -:  651:	int x;
        -:  652:	int index;
        5:  653:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  654:	int nextPlayer = currentPlayer + 1;
        -:  655:
        5:  656:	int tributeRevealedCards[2] = {-1, -1};
        -:  657:	int temphand[MAX_HAND];// moved above the if statement
        5:  658:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:		nextPlayer = 0;
        -:  660:	}
        -:  661:
        -:  662:
        -:  663:	//uses switch to select card and perform actions
        5:  664:	switch( card )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 20%
        -:  665:	{
        -:  666:		case adventurer:
        1:  667:			return cardEffectAdventurer(handPos,currentPlayer,state);
call    0 returned 100%
        -:  668:
        -:  669:		case council_room:
        1:  670:			return cardEffectCouncilRoom(handPos,currentPlayer,state);
call    0 returned 100%
        -:  671:
        -:  672:		case feast:
        -:  673:			//gain card with cost up to 5
        -:  674:			//Backup hand
    #####:  675:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  676:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  678:			}
        -:  679:			//Backup hand
        -:  680:
        -:  681:			//Update Coins for Buy
    #####:  682:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  683:			x = 1;//Condition to loop on
    #####:  684:			while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  685:				if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  686:					if (DEBUG)
        -:  687:						printf("None of that card left, sorry!\n");
        -:  688:
        -:  689:					if (DEBUG){
        -:  690:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:					}
        -:  692:				}
    #####:  693:				else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  694:					printf("That card is too expensive!\n");
call    0 never executed
        -:  695:
        -:  696:					if (DEBUG){
        -:  697:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  698:					}
        -:  699:				}
        -:  700:				else{
        -:  701:
        -:  702:					if (DEBUG){
        -:  703:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  704:					}
        -:  705:
    #####:  706:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  707:					x = 0;//No more buying cards
        -:  708:
        -:  709:					if (DEBUG){
        -:  710:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:					}
        -:  712:
        -:  713:				}
        -:  714:			}
        -:  715:
        -:  716:			//Reset Hand
    #####:  717:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:				state->hand[currentPlayer][i] = temphand[i];
    #####:  719:				temphand[i] = -1;
        -:  720:			}
        -:  721:			//Reset Hand
        -:  722:
    #####:  723:			return 0;
        -:  724:
        -:  725:		case gardens:
    #####:  726:			return -1;
        -:  727:
        -:  728:		case mine:
    #####:  729:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  732:			{
    #####:  733:				return -1;
        -:  734:			}
        -:  735:
    #####:  736:			if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  737:			{
    #####:  738:				return -1;
        -:  739:			}
        -:  740:
    #####:  741:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  742:			{
    #####:  743:				return -1;
        -:  744:			}
        -:  745:
    #####:  746:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  747:
        -:  748:			//discard card from hand
    #####:  749:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  750:
        -:  751:			//discard trashed card
    #####:  752:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  753:			{
    #####:  754:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  755:				{
    #####:  756:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  757:					break;
        -:  758:				}
        -:  759:			}
        -:  760:
    #####:  761:			return 0;
        -:  762:
        -:  763:		case remodel:
    #####:  764:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  767:			{
    #####:  768:				return -1;
        -:  769:			}
        -:  770:
    #####:  771:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  772:
        -:  773:			//discard card from hand
    #####:  774:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  775:
        -:  776:			//discard trashed card
    #####:  777:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  778:			{
    #####:  779:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  780:				{
    #####:  781:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  782:					break;
        -:  783:				}
        -:  784:			}
        -:  785:
        -:  786:
    #####:  787:			return 0;
        -:  788:
        -:  789:		case smithy:
        1:  790:			return cardEffectSmithy(handPos,currentPlayer,state);
call    0 returned 100%
        -:  791:
        -:  792:		case village:
        1:  793:			return cardEffectVillage(handPos,currentPlayer,state);
call    0 returned 100%
        -:  794:
        -:  795:		case baron:
    #####:  796:			state->numBuys++;//Increase buys by 1!
    #####:  797:			if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  798:				int p = 0;//Iterator for hand!
    #####:  799:				int card_not_discarded = 1;//Flag for discard set!
    #####:  800:				while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  801:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  802:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  803:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  804:						state->discardCount[currentPlayer]++;
    #####:  805:						for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  806:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  807:						}
    #####:  808:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  809:						state->handCount[currentPlayer]--;
    #####:  810:						card_not_discarded = 0;//Exit the loop
        -:  811:					}
    #####:  812:					else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  813:						if(DEBUG) {
        -:  814:							printf("No estate cards in your hand, invalid choice\n");
        -:  815:							printf("Must gain an estate if there are any\n");
        -:  816:						}
    #####:  817:						if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  819:							state->supplyCount[estate]--;//Decrement estates
    #####:  820:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  821:								isGameOver(state);
call    0 never executed
        -:  822:							}
        -:  823:						}
    #####:  824:						card_not_discarded = 0;//Exit the loop
        -:  825:					}
        -:  826:
        -:  827:					else{
    #####:  828:						p++;//Next card
        -:  829:					}
        -:  830:				}
        -:  831:			}
        -:  832:
        -:  833:			else{
    #####:  834:				if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  835:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  836:					state->supplyCount[estate]--;//Decrement Estates
    #####:  837:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:						isGameOver(state);
call    0 never executed
        -:  839:					}
        -:  840:				}
        -:  841:			}
        -:  842:
        -:  843:
    #####:  844:			return 0;
        -:  845:
        -:  846:		case great_hall:
        -:  847:			//+1 Card
    #####:  848:			drawCard(currentPlayer, state);
call    0 never executed
        -:  849:
        -:  850:			//+1 Actions
    #####:  851:			state->numActions++;
        -:  852:
        -:  853:			//discard card from hand
    #####:  854:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  855:			return 0;
        -:  856:
        -:  857:		case minion:
        -:  858:			//+1 action
    #####:  859:			state->numActions++;
        -:  860:
        -:  861:			//discard card from hand
    #####:  862:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  863:
    #####:  864:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  865:			{
    #####:  866:				state->coins = state->coins + 2;
        -:  867:			}
        -:  868:
    #####:  869:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  870:			{
        -:  871:				//discard hand
    #####:  872:				while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  873:				{
    #####:  874:					discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:				}
        -:  876:
        -:  877:				//draw 4
    #####:  878:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  879:				{
    #####:  880:					drawCard(currentPlayer, state);
call    0 never executed
        -:  881:				}
        -:  882:
        -:  883:				//other players discard hand and redraw if hand size > 4
    #####:  884:				for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  885:				{
    #####:  886:					if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  887:					{
    #####:  888:						if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  889:						{
        -:  890:							//discard hand
    #####:  891:							while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  892:							{
    #####:  893:								discardCard(handPos, i, state, 0);
call    0 never executed
        -:  894:							}
        -:  895:
        -:  896:							//draw 4
    #####:  897:							for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  898:							{
    #####:  899:								drawCard(i, state);
call    0 never executed
        -:  900:							}
        -:  901:						}
        -:  902:					}
        -:  903:				}
        -:  904:
        -:  905:			}
    #####:  906:			return 0;
        -:  907:
        -:  908:		case steward:
    #####:  909:			if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  910:			{
        -:  911:				//+2 cards
    #####:  912:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  913:				drawCard(currentPlayer, state);
call    0 never executed
        -:  914:			}
    #####:  915:			else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  916:			{
        -:  917:				//+2 coins
    #####:  918:				state->coins = state->coins + 2;
        -:  919:			}
        -:  920:			else
        -:  921:			{
        -:  922:				//trash 2 cards in hand
    #####:  923:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  924:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  925:			}
        -:  926:
        -:  927:			//discard card from hand
    #####:  928:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  929:			return 0;
        -:  930:
        -:  931:		case tribute:
    #####:  932:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  933:				if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:					state->deckCount[nextPlayer]--;
        -:  936:				}
    #####:  937:				else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:					state->discardCount[nextPlayer]--;
        -:  940:				}
        -:  941:				else{
        -:  942:					//No Card to Reveal
        -:  943:					if (DEBUG){
        -:  944:						printf("No cards to reveal\n");
        -:  945:					}
        -:  946:				}
        -:  947:			}
        -:  948:
        -:  949:			else{
    #####:  950:				if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  951:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  952:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:						state->deckCount[nextPlayer]++;
    #####:  954:						state->discard[nextPlayer][i] = -1;
    #####:  955:						state->discardCount[nextPlayer]--;
        -:  956:					}
        -:  957:
    #####:  958:					shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  959:				}
    #####:  960:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:				state->deckCount[nextPlayer]--;
    #####:  963:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:				state->deckCount[nextPlayer]--;
        -:  966:			}
        -:  967:
    #####:  968:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  969:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:				state->playedCardCount++;
    #####:  971:				tributeRevealedCards[1] = -1;
        -:  972:			}
        -:  973:
    #####:  974:			for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  975:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  976:					state->coins += 2;
        -:  977:				}
        -:  978:
    #####:  979:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  980:					drawCard(currentPlayer, state);
call    0 never executed
    #####:  981:					drawCard(currentPlayer, state);
call    0 never executed
        -:  982:				}
        -:  983:				else{//Action Card
    #####:  984:					state->numActions = state->numActions + 2;
        -:  985:				}
        -:  986:			}
        -:  987:
    #####:  988:			return 0;
        -:  989:
        -:  990:		case ambassador:
    #####:  991:			j = 0;		//used to check if player has enough cards to discard
        -:  992:
    #####:  993:			if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  994:			{
    #####:  995:				return -1;
        -:  996:			}
        -:  997:
    #####:  998:			if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  999:			{
    #####: 1000:				return -1;
        -: 1001:			}
        -: 1002:
    #####: 1003:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:			{
    #####: 1005:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1006:				{
    #####: 1007:					j++;
        -: 1008:				}
        -: 1009:			}
    #####: 1010:			if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1011:			{
    #####: 1012:				return -1;
        -: 1013:			}
        -: 1014:
        -: 1015:			if (DEBUG)
        -: 1016:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1017:
        -: 1018:			//increase supply count for choosen card by amount being discarded
    #####: 1019:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1020:
        -: 1021:			//each other player gains a copy of revealed card
    #####: 1022:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:			{
    #####: 1024:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:				{
    #####: 1026:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1027:				}
        -: 1028:			}
        -: 1029:
        -: 1030:			//discard played card from hand
    #####: 1031:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1032:
        -: 1033:			//trash copies of cards returned to supply
    #####: 1034:			for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1035:			{
    #####: 1036:				for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:				{
    #####: 1038:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1039:					{
    #####: 1040:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1041:						break;
        -: 1042:					}
        -: 1043:				}
        -: 1044:			}
        -: 1045:
    #####: 1046:			return 0;
        -: 1047:
        -: 1048:		case cutpurse:
    #####: 1049:            return cardEffectCutpurse(handPos,currentPlayer,state);
call    0 never executed
        -: 1050:
        -: 1051:
        -: 1052:
        -: 1053:		case embargo:
        -: 1054:			//+2 Coins
    #####: 1055:			state->coins = state->coins + 2;
        -: 1056:
        -: 1057:			//see if selected pile is in play
    #####: 1058:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1059:			{
    #####: 1060:				return -1;
        -: 1061:			}
        -: 1062:
        -: 1063:			//add embargo token to selected supply pile
    #####: 1064:			state->embargoTokens[choice1]++;
        -: 1065:
        -: 1066:			//trash card
    #####: 1067:			discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1068:			return 0;
        -: 1069:
        -: 1070:		case outpost:
        -: 1071:			//set outpost flag
    #####: 1072:			state->outpostPlayed++;
        -: 1073:
        -: 1074:			//discard card
    #####: 1075:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1076:			return 0;
        -: 1077:
        -: 1078:		case salvager:
        -: 1079:			//+1 buy
    #####: 1080:			state->numBuys++;
        -: 1081:
    #####: 1082:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1083:			{
        -: 1084:				//gain coins equal to trashed card
    #####: 1085:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1086:				//trash card
    #####: 1087:				discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1088:			}
        -: 1089:
        -: 1090:			//discard card
    #####: 1091:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1092:			return 0;
        -: 1093:
        -: 1094:		case sea_hag:
    #####: 1095:			for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1096:				if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1097:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1098:					state->discardCount[i]++;
    #####: 1099:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1100:				}
        -: 1101:			}
    #####: 1102:			return 0;
        -: 1103:
        -: 1104:		case treasure_map:
        -: 1105:			//search hand for another treasure_map
    #####: 1106:			index = -1;
    #####: 1107:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:			{
    #####: 1109:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1110:				{
    #####: 1111:					index = i;
    #####: 1112:					break;
        -: 1113:				}
        -: 1114:			}
    #####: 1115:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1116:			{
        -: 1117:				//trash both treasure cards
    #####: 1118:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1120:
        -: 1121:				//gain 4 Gold cards
    #####: 1122:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:				{
    #####: 1124:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1125:				}
        -: 1126:
        -: 1127:				//return success
    #####: 1128:				return 1;
        -: 1129:			}
        -: 1130:
        -: 1131:			//no second treasure_map found in hand
    #####: 1132:			return -1;
        -: 1133:	}
        -: 1134:
        1: 1135:	return -1;
        -: 1136:}
        -: 1137:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1138:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1139:{
        -: 1140:
        -: 1141:	//if card is not trashed, added to Played pile
        3: 1142:	if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1143:	{
        -: 1144:		//add card to played pile
        3: 1145:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1146:		state->playedCardCount++;
        -: 1147:	}
        -: 1148:
        -: 1149:	//set played card to -1
        3: 1150:	state->hand[currentPlayer][handPos] = -1;
        -: 1151:
        -: 1152:	//remove card from player's hand
        3: 1153:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1154:	{
        -: 1155:		//reduce number of cards in hand
    #####: 1156:		state->handCount[currentPlayer]--;
        -: 1157:	}
        3: 1158:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1159:	{
        -: 1160:		//reduce number of cards in hand
    #####: 1161:		state->handCount[currentPlayer]--;
        -: 1162:	}
        -: 1163:	else
        -: 1164:	{
        -: 1165:		//replace discarded card with last card in hand
        3: 1166:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1167:		//set last card to -1
        3: 1168:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1169:		//reduce number of cards in hand
        3: 1170:		state->handCount[currentPlayer]--;
        -: 1171:	}
        -: 1172:
        3: 1173:	return 0;
        -: 1174:}
        -: 1175:
function gainCard called 4 returned 100% blocks executed 100%
        4: 1176:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1177:{
        -: 1178:	//Note: supplyPos is enum of choosen card
        -: 1179:
        -: 1180:	//check if supply pile is empty (0) or card is not used in game (-1)
        4: 1181:	if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -: 1182:	{
        1: 1183:		return -1;
        -: 1184:	}
        -: 1185:
        -: 1186:	//added card for [whoseTurn] current player:
        -: 1187:	// toFlag = 0 : add to discard
        -: 1188:	// toFlag = 1 : add to deck
        -: 1189:	// toFlag = 2 : add to hand
        -: 1190:
        3: 1191:	if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1192:	{
        1: 1193:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1194:		state->deckCount[player]++;
        -: 1195:	}
        2: 1196:	else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1197:	{
        1: 1198:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1199:		state->handCount[player]++;
        -: 1200:	}
        -: 1201:	else
        -: 1202:	{
        1: 1203:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1204:		state->discardCount[player]++;
        -: 1205:	}
        -: 1206:
        -: 1207:	//decrease number in supply pile
        3: 1208:	state->supplyCount[supplyPos]--;
        -: 1209:
        3: 1210:	return 0;
        -: 1211:}
        -: 1212:
function updateCoins called 11 returned 100% blocks executed 82%
       11: 1213:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1214:{
        -: 1215:	int i;
        -: 1216:
        -: 1217:	//reset coin count
       11: 1218:	state->coins = 0;
        -: 1219:
        -: 1220:	//add coins for each Treasure card in player's hand
       66: 1221:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1222:	{
       55: 1223:		if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1224:		{
       44: 1225:			state->coins += 1;
        -: 1226:		}
       11: 1227:		else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1228:		{
    #####: 1229:			state->coins += 2;
        -: 1230:		}
       11: 1231:		else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1232:		{
    #####: 1233:			state->coins += 3;
        -: 1234:		}
        -: 1235:	}
        -: 1236:
        -: 1237:	//add bonus
       11: 1238:	state->coins += bonus;
        -: 1239:
       11: 1240:	return 0;
        -: 1241:}
        -: 1242:
        -: 1243:
        -: 1244://
        -: 1245://
        -: 1246://
        -: 1247://card effects
        -: 1248://
        -: 1249://
        -: 1250://
        -: 1251:
function cardEffectSmithy called 1 returned 100% blocks executed 100%
        1: 1252:int cardEffectSmithy(int handPos, int currentPlayer, struct gameState *state){
        -: 1253:    int i;
        -: 1254:	//+3 Cards
        5: 1255:	for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1256:	{
        4: 1257:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1258:	}
        -: 1259:
        -: 1260:	//discard card from hand
        1: 1261:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1262:    return 0;
        -: 1263:}
        -: 1264:
function cardEffectVillage called 1 returned 100% blocks executed 100%
        1: 1265:int cardEffectVillage(int handPos, int currentPlayer, struct gameState *state){
        -: 1266:
        -: 1267:	//+1 Card
        1: 1268:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1269:
        -: 1270:	//+2 Actions
        1: 1271:	state->numActions ++;
        -: 1272:
        -: 1273:	//discard played card from hand
        1: 1274:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1275:    return 0;
        -: 1276:}
        -: 1277:
function cardEffectCutpurse called 0 returned 0% blocks executed 0%
    #####: 1278:int cardEffectCutpurse(int handPos, int currentPlayer, struct gameState *state){
        -: 1279:    int i,j,k;
        -: 1280:
    #####: 1281:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1282:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:    {
    #####: 1284:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1285:        {
    #####: 1286:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1287:            {
    #####: 1288:                if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1289:                {
    #####: 1290:                    discardCard(j, i, state, 0);
call    0 never executed
    #####: 1291:                    break;
        -: 1292:                }
    #####: 1293:                if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1294:                {
    #####: 1295:                    for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1296:                    {
        -: 1297:                        if (DEBUG)
        -: 1298:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:                    }
    #####: 1300:                    break;
        -: 1301:                }
        -: 1302:            }
        -: 1303:        }
        -: 1304:    }
        -: 1305:    //discard played card from hand
    #####: 1306:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1307:
    #####: 1308:    return 0;
        -: 1309:}
        -: 1310:
function cardEffectCouncilRoom called 1 returned 100% blocks executed 100%
        1: 1311:int cardEffectCouncilRoom(int handPos, int currentPlayer, struct gameState *state){
        -: 1312:
        -: 1313:    int i;
        -: 1314:	//+4 Cards
        5: 1315:	for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4: 1316:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1317:	}
        -: 1318:
        -: 1319:	//+1 Buy
        1: 1320:	state->numBuys++;
        -: 1321:
        -: 1322:	//Each other player draws a card
        4: 1323:	for (i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1324:		drawCard(i, state);
call    0 returned 100%
        -: 1325:	}
        -: 1326:
        -: 1327:    //put played card in played card pile
        1: 1328:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1329:    return 0;
        -: 1330:}
        -: 1331:
        -: 1332:
function cardEffectAdventurer called 1 returned 100% blocks executed 40%
        1: 1333:int cardEffectAdventurer(int handPos, int currentPlayer, struct gameState *state){
        -: 1334:	int drawntreasure;
        -: 1335:	int cardDrawn;
        -: 1336:	int temphand[MAX_HAND];
        1: 1337:	int z = 0; //counter for temphand
        -: 1338:
        2: 1339:	while(drawntreasure<2){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1340:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1341:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1342:		}
    #####: 1343:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1344:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1345:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1346:			drawntreasure++;
        -: 1347:		else{
    #####: 1348:			temphand[z]=cardDrawn;
    #####: 1349:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1350:			z++;
        -: 1351:		}
        -: 1352:	}
        2: 1353:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1354:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1355:		z=z-1;
        -: 1356:	}
        1: 1357:	return 0;
        -: 1358:}
        -: 1359:
        -: 1360://end of dominion.c
