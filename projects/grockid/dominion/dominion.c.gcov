        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 350 returned 100% blocks executed 83%
      350:    8:int compare(const void* a, const void* b) {
      350:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      350:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       95:   12:    return -1;
      255:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 94%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
call    0 returned 100%
       11:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      110:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       44:  115:		  if (numPlayers == 2){ 
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       20:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       88:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       34:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  139:    {
       23:  140:      state->deckCount[i] = 0;
       92:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       69:  143:	  state->deck[i][j] = estate;
       69:  144:	  state->deckCount[i]++;
        -:  145:	}
      184:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      161:  148:	  state->deck[i][j] = copper;
      161:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       34:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  155:    {
       23:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       34:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       23:  166:      state->handCount[i] = 0;
       23:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
        -:  201:
        -:  202:
function shuffle called 33 returned 100% blocks executed 100%
       33:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       33:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       33:  211:  if (state->deckCount[player] < 1)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        9:  212:    return -1;
       24:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      283:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      235:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      235:  218:    newDeck[newDeckPos] = state->deck[player][card];
      235:  219:    newDeckPos++;
      818:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      583:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      235:  223:    state->deckCount[player]--;
        -:  224:  }
      259:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      235:  226:    state->deck[player][i] = newDeck[i];
      235:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       24:  230:  return 0;
        -:  231:}
        -:  232:
        -:  233:
        -:  234://unit test this 2
function playCard called 0 returned 0% blocks executed 0%
    #####:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
    #####:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
    #####:  241:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
    #####:  247:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
    #####:  253:  card = handCard(handPos, state);
call    0 never executed
        -:  254:	
        -:  255:  //check if selected card is an action
    #####:  256:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    #####:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
    #####:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
    #####:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  272:	
    #####:  273:  return 0;
        -:  274:}
        -:  275:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
    #####:  284:  who = state->whoseTurn;
        -:  285:
    #####:  286:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:    return -1;
        -:  298:  } else {
    #####:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    #####:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  302:  
    #####:  303:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    #####:  312:  return 0;
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  317:}
        -:  318:
function handCard called 0 returned 0% blocks executed 0%
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  324:int supplyCount(int card, struct gameState *state) {
        6:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 13 returned 100% blocks executed 100%
       13:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
       13:  330:  int count = 0;
        -:  331:
       70:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  333:    {
       57:  334:      if (state->deck[player][i] == card) count++;
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -:  335:    }
        -:  336:
       81:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  338:    {
       68:  339:      if (state->hand[player][i] == card) count++;
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -:  340:    }
        -:  341:
       81:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  343:    {
       68:  344:      if (state->discard[player][i] == card) count++;
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  345:    }
        -:  346:
       13:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  350:int whoseTurn(struct gameState *state) {
        5:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  358:  
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
        -:  394:
        -:  395:
        -:  396:
        -:  397://unit test this 3
function isGameOver called 10 returned 100% blocks executed 100%
       10:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
       10:  403:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  404:    {
        2:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
        8:  409:  j = 0;
      208:  410:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  411:    {
      200:  412:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  413:	{
       10:  414:	  j++;
        -:  415:	}
        -:  416:    }
        8:  417:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  418:    {
        2:  419:      return 1;
        -:  420:    }
        -:  421:
        6:  422:return 0;
        -:  423:}
        -:  424:
function scoreFor called 17 returned 100% blocks executed 100%
       17:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
       17:  428:  int score = 0;
        -:  429:  //score from hand
      110:  430:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  431:    {
       93:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       93:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       93:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       93:  435:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       93:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       93:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  438:    }
        -:  439:  //score from discard
      105:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  441:    {
       88:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       88:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       88:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
      105:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  452:    {
       88:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       88:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       88:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       88:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  459:    }
        -:  460:
       17:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 79 returned 100% blocks executed 100%
       79:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
       79:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       10:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        5:  541:      state->deck[player][i] = state->discard[player][i];
        5:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
        5:  545:    state->deckCount[player] = state->discardCount[player];
        5:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        5:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        5:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        5:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        5:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        5:  566:    if (deckCounter == 0)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  567:      return -1;
        -:  568:
        1:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  570:    state->deckCount[player]--;
        1:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       74:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       74:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       74:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       74:  583:    state->deckCount[player]--;
       74:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       75:  587:  return 0;
        -:  588:}
        -:  589:
function getCost called 1 returned 100% blocks executed 10%
        1:  590:int getCost(int cardNumber)
        -:  591:{
        1:  592:  switch( cardNumber ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  593:    {
        -:  594:    case curse:
        1:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
function smithy_card called 1 returned 100% blocks executed 100%
        1:  653:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  654:  //+3 Cards
        -:  655:  int i;
        -:  656:  
        5:  657:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  658:	{
        4:  659:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  660:	}
        -:  661:			
        -:  662:      //discard card from hand
        1:  663:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  664:      return 0;
        -:  665:		
        -:  666:}
function adventurer_card called 2 returned 100% blocks executed 100%
        2:  667:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  668:  int temphand[MAX_HAND];// moved above the if statement
        2:  669:  int drawntreasure=0;
        -:  670:  int cardDrawn;
        2:  671:  int z = 0;	
       18:  672:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       14:  673:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        5:  674:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  675:	}
       14:  676:	drawCard(currentPlayer, state);
call    0 returned 100%
       14:  677:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14:  678:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       10:  679:	  drawntreasure++;
        -:  680:	else{
        4:  681:	  temphand[z]=cardDrawn;
        4:  682:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  683:	  z++;
        -:  684:	}
        -:  685:      }
        8:  686:      while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4:  687:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  688:	z=z-1;
        -:  689:      }
        2:  690:      return 0;
        -:  691:		
        -:  692:}
function baron_card called 0 returned 0% blocks executed 0%
    #####:  693:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  694:	state->numBuys++;//Increase buys by 1!
    #####:  695:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  696:	int p = 0;//Iterator for hand!
    #####:  697:	int card_not_discarded = 1;//Flag for discard set!
    #####:  698:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  699:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  700:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  701:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  702:	    state->discardCount[currentPlayer]++;
    #####:  703:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  704:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  705:	    }
    #####:  706:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  707:	    state->handCount[currentPlayer]--;
    #####:  708:	    card_not_discarded = 0;//Exit the loop
        -:  709:	  }
    #####:  710:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  711:	    if(DEBUG) {
        -:  712:	      printf("No estate cards in your hand, invalid choice\n");
        -:  713:	      printf("Must gain an estate if there are any\n");
        -:  714:	    }
    #####:  715:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  716:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  717:	      state->supplyCount[estate]--;//Decrement estates
    #####:  718:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  719:		isGameOver(state);
call    0 never executed
        -:  720:	      }
        -:  721:	    }
    #####:  722:	    card_not_discarded = 0;//Exit the loop
        -:  723:	  }
        -:  724:			    
        -:  725:	  else{
    #####:  726:	    p++;//Next card
        -:  727:	  }
        -:  728:	}
        -:  729:      }
        -:  730:			    
        -:  731:      else{
    #####:  732:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  734:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  735:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:	    isGameOver(state);
call    0 never executed
        -:  737:	  }
        -:  738:	}
        -:  739:      }
        -:  740:	    
        -:  741:      
    #####:  742:      return 0;
        -:  743:
        -:  744:}
function mine_card called 0 returned 0% blocks executed 0%
    #####:  745:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  746:	int i;
        -:  747:	int j;
        -:  748:	
        -:  749:   
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:
        -:  773:      //discard trashed card
        -:  774:	  //
        -:  775:	  
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  781:		  break;
        -:  782:	    }
        -:  783:	}
        -:  784:	
        -:  785:			
    #####:  786:      return 0;
        -:  787:		
        -:  788:}
        -:  789:
        -:  790:
function council_room_card called 1 returned 100% blocks executed 100%
        1:  791:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  792:  //+4 Cards
        -:  793:  int i;
        -:  794:
        5:  795:      for (i = 0; i < 4; i++)	
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  796:  	  {
        4:  797:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  798:	}
        -:  799:			
        -:  800:      //+1 Buy
        1:  801:      state->numBuys++;
        -:  802:			
        -:  803:      //Each other player draws a card
        4:  804:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  805:	{
        -:  806:	 //bug, doesn' t exlude current player for additional draw
        3:  807:		 if ( i == currentPlayer )// added bug changed not equal to equal
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  808:	    {
        1:  809:	      drawCard(i, state);
call    0 returned 100%
        -:  810:	    }
        -:  811:	}
        -:  812:			
        -:  813:      //put played card in played card pile
        1:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  815:			
        1:  816:      return 0;
        -:  817:		
        -:  818:}
        -:  819:
        -:  820:
function cardEffect called 5 returned 100% blocks executed 14%
        5:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
        5:  828:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
        5:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
        -:  833: // int drawntreasure=0;
        -:  834: // int cardDrawn;
        -:  835:  //int z = 0;// this is the counter for the temp hand
        5:  836:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:	
        -:  841:  //uses switch to select card and perform actions
        5:  842:  switch( card ) 
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  843:    {
        -:  844:	
        -:  845:	//refactored
        -:  846:    case adventurer:
        -:  847:   
        2:  848:	return adventurer_card(state, currentPlayer);
call    0 returned 100%
        -:  849:
        -:  850:	//refactored
        -:  851:    case council_room:
        1:  852:    	council_room_card(state, handPos, currentPlayer);
call    0 returned 100%
        -:  853:
        -:  854:
        -:  855:    case feast:
        -:  856:      //gain card with cost up to 5
        -:  857:      //Backup hand
       11:  858:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  859:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       10:  860:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  861:      }
        -:  862:      //Backup hand
        -:  863:
        -:  864:      //Update Coins for Buy
        1:  865:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  866:      x = 1;//Condition to loop on
        3:  867:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  868:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  869:	  if (DEBUG)
        -:  870:	    printf("None of that card left, sorry!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  874:	  }
        -:  875:	}
        1:  876:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  877:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  878:
        -:  879:	  if (DEBUG){
        -:  880:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  881:	  }
        -:  882:	}
        -:  883:	else{
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        1:  889:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  890:	  x = 0;//No more buying cards
        -:  891:
        -:  892:	  if (DEBUG){
        -:  893:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  894:	  }
        -:  895:
        -:  896:	}
        -:  897:      }     
        -:  898:
        -:  899:      //Reset Hand
       11:  900:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  901:	state->hand[currentPlayer][i] = temphand[i];
       10:  902:	temphand[i] = -1;
        -:  903:      }
        -:  904:      //Reset Hand
        -:  905:      			
        1:  906:      return 0;
        -:  907:			
        -:  908:    case gardens:
    #####:  909:      return -1;
        -:  910:			
        -:  911:   
        -:  912:   
        -:  913:	//refactored
        -:  914:	case mine:
    #####:  915:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
call    0 never executed
        -:  916:
        -:  917:
        -:  918:
        -:  919:    case remodel:
    #####:  920:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  921:
    #####:  922:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  934:	{
    #####:  935:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  936:	    {
    #####:  937:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  938:	      break;
        -:  939:	    }
        -:  940:	}
        -:  941:
        -:  942:
    #####:  943:      return 0;
        -:  944:		
        -:  945:
        -:  946:	  //refactored
        -:  947:    case smithy:
        1:  948:   		return smithy_card(handPos, state, currentPlayer);
call    0 returned 100%
        -:  949:		 
        -:  950:    case village:
        -:  951:      //+1 Card
        1:  952:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  953:			
        -:  954:      //+2 Actions
        1:  955:      state->numActions = state->numActions + 2;
        -:  956:			
        -:  957:      //discard played card from hand
        1:  958:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  959:      return 0;
        -:  960:	
        -:  961:
        -:  962:	//refactored	  
        -:  963:    case baron:
    #####:  964:    	return baron_card(choice1, state, currentPlayer);  
call    0 never executed
        -:  965:		  
        -:  966:    case great_hall:
        -:  967:      //+1 Card
    #####:  968:      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:			
        -:  970:      //+1 Actions
    #####:  971:      state->numActions++;
        -:  972:			
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case minion:
        -:  978:      //+1 action
    #####:  979:      state->numActions++;
        -:  980:			
        -:  981:      //discard card from hand
    #####:  982:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  983:			
    #####:  984:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  state->coins = state->coins + 2;
        -:  987:	}
        -:  988:			
    #####:  989:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  990:	{
        -:  991:	  //discard hand
    #####:  992:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  993:	    {
    #####:  994:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  995:	    }
        -:  996:				
        -:  997:	  //draw 4
    #####:  998:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1001:	    }
        -: 1002:				
        -: 1003:	  //other players discard hand and redraw if hand size > 4
    #####: 1004:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:		{
    #####: 1008:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1009:		    {
        -: 1010:		      //discard hand
    #####: 1011:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1012:			{
    #####: 1013:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1014:			}
        -: 1015:							
        -: 1016:		      //draw 4
    #####: 1017:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
    #####: 1019:			  drawCard(i, state);
call    0 never executed
        -: 1020:			}
        -: 1021:		    }
        -: 1022:		}
        -: 1023:	    }
        -: 1024:				
        -: 1025:	}
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case steward:
    #####: 1029:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
        -: 1031:	  //+2 cards
    #####: 1032:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1034:	}
    #####: 1035:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
        -: 1037:	  //+2 coins
    #####: 1038:	  state->coins = state->coins + 2;
        -: 1039:	}
        -: 1040:      else
        -: 1041:	{
        -: 1042:	  //trash 2 cards in hand
    #####: 1043:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1044:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1045:	}
        -: 1046:			
        -: 1047:      //discard card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case tribute:
    #####: 1052:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1054:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	  state->deckCount[nextPlayer]--;
        -: 1056:	}
    #####: 1057:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1059:	  state->discardCount[nextPlayer]--;
        -: 1060:	}
        -: 1061:	else{
        -: 1062:	  //No Card to Reveal
        -: 1063:	  if (DEBUG){
        -: 1064:	    printf("No cards to reveal\n");
        -: 1065:	  }
        -: 1066:	}
        -: 1067:      }
        -: 1068:	    
        -: 1069:      else{
    #####: 1070:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1071:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1072:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1073:	    state->deckCount[nextPlayer]++;
    #####: 1074:	    state->discard[nextPlayer][i] = -1;
    #####: 1075:	    state->discardCount[nextPlayer]--;
        -: 1076:	  }
        -: 1077:			    
    #####: 1078:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1079:	} 
    #####: 1080:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1081:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1082:	state->deckCount[nextPlayer]--;
    #####: 1083:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
        -: 1086:      }    
        -: 1087:		       
    #####: 1088:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1089:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1090:	state->playedCardCount++;
    #####: 1091:	tributeRevealedCards[1] = -1;
        -: 1092:      }
        -: 1093:
    #####: 1094:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1095:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1096:	  state->coins += 2;
        -: 1097:	}
        -: 1098:		    
    #####: 1099:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1100:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1102:	}
        -: 1103:	else{//Action Card
    #####: 1104:	  state->numActions = state->numActions + 2;
        -: 1105:	}
        -: 1106:      }
        -: 1107:	    
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case ambassador:
    #####: 1111:      j = 0;		//used to check if player has enough cards to discard
        -: 1112:
    #####: 1113:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1114:	{
    #####: 1115:	  return -1;				
        -: 1116:	}
        -: 1117:
    #####: 1118:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  return -1;
        -: 1121:	}
        -: 1122:
    #####: 1123:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1126:	    {
    #####: 1127:	      j++;
        -: 1128:	    }
        -: 1129:	}
    #####: 1130:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  return -1;				
        -: 1133:	}
        -: 1134:
        -: 1135:      if (DEBUG) 
        -: 1136:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1137:
        -: 1138:      //increase supply count for choosen card by amount being discarded
    #####: 1139:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1140:			
        -: 1141:      //each other player gains a copy of revealed card
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1147:	    }
        -: 1148:	}
        -: 1149:
        -: 1150:      //discard played card from hand
    #####: 1151:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1152:
        -: 1153:      //trash copies of cards returned to supply
    #####: 1154:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1159:		{
    #####: 1160:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1161:		  break;
        -: 1162:		}
        -: 1163:	    }
        -: 1164:	}			
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case cutpurse:
        -: 1169:
    #####: 1170:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1171:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:	{
    #####: 1173:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1174:	    {
    #####: 1175:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1176:		{
    #####: 1177:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1178:		    {
    #####: 1179:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1180:		      break;
        -: 1181:		    }
    #####: 1182:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1183:		    {
    #####: 1184:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1185:			{
        -: 1186:			  if (DEBUG)
        -: 1187:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1188:			}	
    #####: 1189:		      break;
        -: 1190:		    }		
        -: 1191:		}
        -: 1192:					
        -: 1193:	    }
        -: 1194:				
        -: 1195:	}				
        -: 1196:
        -: 1197:      //discard played card from hand
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1199:
    #####: 1200:      return 0;
        -: 1201:
        -: 1202:		
        -: 1203:    case embargo: 
        -: 1204:      //+2 Coins
    #####: 1205:      state->coins = state->coins + 2;
        -: 1206:			
        -: 1207:      //see if selected pile is in play
    #####: 1208:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1209:	{
    #####: 1210:	  return -1;
        -: 1211:	}
        -: 1212:			
        -: 1213:      //add embargo token to selected supply pile
    #####: 1214:      state->embargoTokens[choice1]++;
        -: 1215:			
        -: 1216:      //trash card
    #####: 1217:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case outpost:
        -: 1221:      //set outpost flag
    #####: 1222:      state->outpostPlayed++;
        -: 1223:			
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case salvager:
        -: 1229:      //+1 buy
    #####: 1230:      state->numBuys++;
        -: 1231:			
    #####: 1232:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //gain coins equal to trashed card
    #####: 1235:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1236:	  //trash card
    #####: 1237:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1238:	}
        -: 1239:			
        -: 1240:      //discard card
    #####: 1241:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1242:      return 0;
        -: 1243:		
        -: 1244:    case sea_hag:
    #####: 1245:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1246:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1247:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1248:	  state->discardCount[i]++;
    #####: 1249:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1250:	}
        -: 1251:      }
    #####: 1252:      return 0;
        -: 1253:		
        -: 1254:    case treasure_map:
        -: 1255:      //search hand for another treasure_map
    #####: 1256:      index = -1;
    #####: 1257:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1260:	    {
    #####: 1261:	      index = i;
    #####: 1262:	      break;
        -: 1263:	    }
        -: 1264:	}
    #####: 1265:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1266:	{
        -: 1267:	  //trash both treasure cards
    #####: 1268:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1269:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1270:
        -: 1271:	  //gain 4 Gold cards
    #####: 1272:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:	    {
    #####: 1274:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1275:	    }
        -: 1276:				
        -: 1277:	  //return success
    #####: 1278:	  return 1;
        -: 1279:	}
        -: 1280:			
        -: 1281:      //no second treasure_map found in hand
    #####: 1282:      return -1;
        -: 1283:    }
        -: 1284:	
    #####: 1285:  return -1;
        -: 1286:}
        -: 1287:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1288:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1289:{
        -: 1290:	
        -: 1291:  //if card is not trashed, added to Played pile 
        3: 1292:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1293:    {
        -: 1294:      //add card to played pile
        3: 1295:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1296:      state->playedCardCount++;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //set played card to -1
        3: 1300:  state->hand[currentPlayer][handPos] = -1;
        -: 1301:	
        -: 1302:  //remove card from player's hand
        3: 1303:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        3: 1308:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1309:    {
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:  else 	
        -: 1314:    {
        -: 1315:      //replace discarded card with last card in hand
        3: 1316:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1317:      //set last card to -1
        3: 1318:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1319:      //reduce number of cards in hand
        3: 1320:      state->handCount[currentPlayer]--;
        -: 1321:    }
        -: 1322:	
        3: 1323:  return 0;
        -: 1324:}
        -: 1325:
        -: 1326:
        -: 1327:
        -: 1328://unit test this 4
function gainCard called 5 returned 100% blocks executed 100%
        5: 1329:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1330:{
        -: 1331:  //Note: supplyPos is enum of choosen card
        -: 1332:	
        -: 1333:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1334:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        -: 1335:    {
        1: 1336:      return -1;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //added card for [whoseTurn] current player:
        -: 1340:  // toFlag = 0 : add to discard
        -: 1341:  // toFlag = 1 : add to deck
        -: 1342:  // toFlag = 2 : add to hand
        -: 1343:
        4: 1344:  if (toFlag == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1345:    
        -: 1346:  {
        1: 1347:  	  state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1348:      state->deckCount[player]++;
        -: 1349:    }
        3: 1350:  else if (toFlag == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1351:    {
        1: 1352:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1353:      state->handCount[player]++;
        -: 1354:    }
        -: 1355:  else
        -: 1356:    {
        2: 1357:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1358:      state->discardCount[player]++;
        -: 1359:    }
        -: 1360:	
        -: 1361:  //decrease number in supply pile
        4: 1362:  state->supplyCount[supplyPos]--;
        -: 1363:	 
        4: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368:
function updateCoins called 12 returned 100% blocks executed 82%
       12: 1369:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1370:{
        -: 1371:  int i;
        -: 1372:	
        -: 1373:  //reset coin count
       12: 1374:  state->coins = 0;
        -: 1375:
        -: 1376:  //add coins for each Treasure card in player's hand
       76: 1377:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1378:    {
       64: 1379:      if (state->hand[player][i] == copper)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1380:	{
       44: 1381:	  state->coins += 1;
        -: 1382:	}
       20: 1383:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:	{
    #####: 1385:	  state->coins += 2;
        -: 1386:	}
       20: 1387:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1388:	{
    #####: 1389:	  state->coins += 3;
        -: 1390:	}	
        -: 1391:    }	
        -: 1392:
        -: 1393:  //add bonus
       12: 1394:  state->coins += bonus;
        -: 1395:
       12: 1396:  return 0;
        -: 1397:}
        -: 1398:
        -: 1399:
        -: 1400://end of dominion.c
        -: 1401:
